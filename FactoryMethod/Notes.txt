
Factory Method is a creational design pattern that provides an interface for creating objects in a superclass,
but allows subclasses to alter the type of objects that will be created.

You can also declare the factory method as abstract to force all subclasses to implement their own versions of the method.

How to Implement
1. Make all products follow the same interface. This interface should declare methods that make sense in every product.

2. Add an empty factory method inside the creator class. The return type of the method should match the common product interface.

3. In the creator’s code find all references to product constructors. One by one, replace them with calls to the factory method,
   while extracting the product creation code into the factory method.

4. create a set of creator subclasses for each type of product listed in the factory method. 
  Override/Implement the factory method in the subclasses and extract the appropriate bits of construction code from the base method.


  //Notes:
  //Single Responsibility Principle. 
  //Open/Closed Principle.